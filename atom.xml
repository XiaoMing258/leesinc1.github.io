<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>leesinc1&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-12-18T01:31:56.770Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>leesinc1</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Padding Oracle Attack</title>
    <link href="http://yoursite.com/2017/12/16/Padding-Oracle-Attack/"/>
    <id>http://yoursite.com/2017/12/16/Padding-Oracle-Attack/</id>
    <published>2017-12-16T12:07:33.000Z</published>
    <updated>2017-12-18T01:31:56.770Z</updated>
    
    <content type="html"><![CDATA[<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>在密码学中，分组密码（Block cipher），是一种对称密钥算法。先将明文分成多个等长的块，再进行加密。cbc模式中，每个明文块先于前一个密文块进行异或后，再加密，加密过程：</p><p><img src="/uploads/aes-cbc.jpg" alt="cbc"></p><p>值得注意的是如果最后一个分组长度没有达到模块大小，就需要填充一些字节达到模块大小，以16字节为例，如果明文是leesinc1，长度为八个字节，剩下的八个字节均填充为0x08，填充的值等于需要填充的字节长度。</p><p>上图给出了加密过程，解密过程大致可以看成是逆操作。加密过程是先将明文和IV异或，再把结果进行AES加密得到密文。解密过程是先进行AES解密，再把结果和IV进行异或得到明文。解密完成以后，如果填充的字节不正确，程序往往会抛出异常（这里没有必要担心明文是否正确），根据回显可判断填充的字节是否正确，这是Padding Oracle Attack的前提。</p><h3 id="如何攻击"><a href="#如何攻击" class="headerlink" title="如何攻击"></a>如何攻击</h3><p>在攻击者可以控制IV的前提下可以进行攻击.我们假设经过AES解密后密文为（还没有与IV异或）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">middle(hex):52ee9dc1bdafbfd4a7b835b47d183e5f</div></pre></td></tr></table></figure><p>我们假设只填充了一个字节,则明文结尾为0x01才不会抛出异常,我们设IV（IV是我们可以控制的）为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">IV(hex):00000000000000000000000000000000</div></pre></td></tr></table></figure><p>此时IV和middle异或的结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">明文(hex):52ee9dc1bdafbfd4a7b835b47d183e5f</div></pre></td></tr></table></figure><p>结尾不是0x01所以程序会抛出异常。因为middle是固定的（实际上我们并不知道middle的值）,所以在0x00到0xFF之间，只可能有一个值与middle最后有个字节异或后,结果是0x01,所以可以通过遍历这255个值找出IV需要的最后一个字节。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">IV(hex):0000000000000000000000000000005e</div></pre></td></tr></table></figure><p>异或结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">明文(hex):52ee9dc1bdafbfd4a7b835b47d183e01</div></pre></td></tr></table></figure><p>不会抛出异常，此时根据异或的性质，我们已经分别知道IV和明文的最后一个字节分别为0x5e和0x01，把它们进行xor（异或），就可以得到middle的最后一个值0x5f。然后就可以继续推导剩下的middle，当填充为两个字节时，其值为0x02,0x02。而根据前面的推导已经知道了middle的最后一个字节为0x5f，而我们要求明文的最后一位为0x02，所以要更新IV的最后一个字节为0x5f^0x02=0x5d，再进行遍历IV倒数第二个字节。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">IV(hex):00000000000000000000000000003c5e</div><div class="line">明文(hex):52ee9dc1bdafbfd4a7b835b47d180202</div></pre></td></tr></table></figure><p>可得出middle的倒数第二个字节为0x3c^0x02=0x3e。这样最后可以得到所有的middle。</p><p>得到middle后，与原来的IV进行异或，便可以得到明文。在整个过程中只用到了IV和未知的密文，便得到了明文。在获得middle后，还可以根据改变IV，使明文解密为任意明文。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">原明文 ^ 原IV = middle</div><div class="line">新明文 ^ 新IV = middle</div><div class="line">so: 原明文 ^ 原IV ^ 新明文 = 新IV</div></pre></td></tr></table></figure><h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://39.106.159.230:50001/</div></pre></td></tr></table></figure><p>源码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">function get_token()&#123;</div><div class="line">    $random_token = &apos;&apos;;</div><div class="line">    $str = &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890&quot;;</div><div class="line">    for($i = 0; $i &lt; 16; $i++)&#123;</div><div class="line">        $random_token .= substr($str, rand(1, 61), 1);</div><div class="line">    &#125;</div><div class="line">    return $random_token;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>随机生成一个16位的taken</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">global $plain;</div><div class="line">    $token = get_token();</div><div class="line">    $c = openssl_encrypt($plain, METHOD, SECRET_KEY, OPENSSL_RAW_DATA, $token);</div><div class="line">    $_SESSION[&apos;plain&apos;] = base64_encode($c);</div><div class="line">    setcookie(&quot;token&quot;, base64_encode($token));</div></pre></td></tr></table></figure><p>定义了一个全局变量$plain，把$plain和随机生成的taken一起进行加密,加密模式为”aes-128cbc”,再把结果进行base64编码放进session中$plain变量进行身份验证,把$taken进行base64编码之后放入cookie中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">if (isset($_SESSION[&apos;plain&apos;])) &#123;</div><div class="line">    $c = base64_decode($_SESSION[&apos;plain&apos;]);</div><div class="line">    $token = base64_decode($_COOKIE[&quot;token&quot;]);</div><div class="line">    if($dec = openssl_decrypt($c, METHOD, SECRET_KEY, OPENSSL_RAW_DATA, $token))</div><div class="line">    &#123;</div><div class="line">        if ($dec === &apos;admin&apos;) </div><div class="line">        &#123;</div><div class="line">            $_SESSION[&apos;isadmin&apos;] = 1;</div><div class="line">            return 1;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure><p>把session中的$plain取出来解码之后，和解码之后的taken一起解密，如果解密之后字符串是”admin”，就把isadmin置1，就可得到flag。</p><p>$plain初始值不知道，在这种情况把$plain加密解密之后让它等于admin，而且taken是我们知道并且可以控制的，这时候就可以用到上面的攻击方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">import requests</div><div class="line">import base64</div><div class="line">url = &apos;http://39.106.159.230:50001/&apos;</div><div class="line">N = 16</div><div class="line">def inject_token(token):</div><div class="line">    cookie = &#123;&quot;token&quot;: token&#125;</div><div class="line">    result = s.get(url, cookies = cookie)</div><div class="line">    return result</div><div class="line">def xor(a, b):</div><div class="line">    return &quot;&quot;.join([chr(ord(a[i]) ^ ord(b[i%len(b)])) for i in xrange(len(a))])</div><div class="line">def pad(string, N):</div><div class="line">    l = len(string)</div><div class="line">    if l != N:</div><div class="line">        return string + chr(N-l) * (N-l)</div><div class="line">def padding_oracle(N):</div><div class="line">    get = &quot;&quot;</div><div class="line">    for i in xrange(1, N):</div><div class="line">        for j in xrange(0, 256):</div><div class="line">            padding = xor(get, chr(i) * (i - 1))</div><div class="line">            c=chr(0) * (16 - i) + chr(j) + padding</div><div class="line">            result = inject_token(base64.b64encode(c))</div><div class="line">            if &quot;&lt;html&gt;&quot; in result.content:</div><div class="line">                get = chr(j^i) + get</div><div class="line">                break</div><div class="line">    return get</div><div class="line">data=&#123;&apos;username&apos;: &quot;admin&quot;, &apos;password&apos;: &apos;admin&apos;&#125;</div><div class="line">while 1:</div><div class="line">    s = requests.session()</div><div class="line">    cookies = s.post(url, data = data, allow_redirects = False).headers[&apos;Set-Cookie&apos;].split(&apos;,&apos;) #获得session和token</div><div class="line">    session = cookies[0].split(&quot;;&quot;)[0][10:]</div><div class="line">    token = cookies[1][6:].replace(&quot;%3D&quot;,&apos;=&apos;).replace(&quot;%2F&quot;,&apos;/&apos;).replace(&quot;%2B&quot;,&apos;+&apos;).decode(&apos;base64&apos;)</div><div class="line">    middle1 = padding_oracle(N)</div><div class="line">    print &quot;\n&quot;</div><div class="line">    if(len(middle1) + 1 == 16):</div><div class="line">        for i in xrange(0, 256):</div><div class="line">            middle = chr(i) + middle1   #padding_oracle只能得到15位，爆破第一位</div><div class="line">            plaintext = xor(middle, token);</div><div class="line">            des = pad(&apos;admin&apos;, N)</div><div class="line">            tmp = &quot;&quot;</div><div class="line">            for i in xrange(16):</div><div class="line">                tmp += chr(ord(token[i]) ^ ord(plaintext[i]) ^ ord(des[i]))</div><div class="line">            result = inject_token(base64.b64encode(tmp))</div><div class="line">            if &quot;cumtctf&quot; in result.content:</div><div class="line">                print result.content</div><div class="line">                exit()</div></pre></td></tr></table></figure><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>这种攻击方式和cbc字节翻转攻击类似，之前在一叶飘零大佬的blog上看过cbc字节翻转攻击的介绍，这两种攻击相似之处在于都是通过一个可控的$taken与密文异或之后改变明文的值。</p><p><a href="http://skysec.top/2017/06/16/CBC%E5%AD%97%E8%8A%82%E7%BF%BB%E8%BD%AC%E6%94%BB%E5%87%BB/" target="_blank" rel="external">cbc字节翻转攻击</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;原理&quot;&gt;&lt;a href=&quot;#原理&quot; class=&quot;headerlink&quot; title=&quot;原理&quot;&gt;&lt;/a&gt;原理&lt;/h2&gt;&lt;p&gt;在密码学中，分组密码（Block cipher），是一种对称密钥算法。先将明文分成多个等长的块，再进行加密。cbc模式中，每个明文块先于前一
      
    
    </summary>
    
      <category term="Crypto" scheme="http://yoursite.com/categories/Crypto/"/>
    
    
      <category term="Padding Oracle" scheme="http://yoursite.com/tags/Padding-Oracle/"/>
    
      <category term="cbc" scheme="http://yoursite.com/tags/cbc/"/>
    
  </entry>
  
  <entry>
    <title>武汉MAIC线下攻防</title>
    <link href="http://yoursite.com/2017/12/11/%E6%AD%A6%E6%B1%89MAIC%E7%BA%BF%E4%B8%8B%E6%94%BB%E9%98%B2/"/>
    <id>http://yoursite.com/2017/12/11/武汉MAIC线下攻防/</id>
    <published>2017-12-11T12:04:13.000Z</published>
    <updated>2017-12-11T14:25:13.454Z</updated>
    
    <content type="html"><![CDATA[<h2 id="比赛经过"><a href="#比赛经过" class="headerlink" title="比赛经过"></a>比赛经过</h2><p>比赛已经结束一周，突然觉得好像有必要写点总结（被大佬们打得头皮发麻。。。）。软件工程考试前三天，接到通知说要去线下比赛，刚开始还是很高兴，毕竟第一次打线下比赛（虽然这个比赛很水，真的大佬们都没来）</p><p>因为第一次打线下，而且也是第一次接触攻防赛，比赛之前向学校的大佬们了解一些awd的套路，我们在比赛之前也做了很多的准备<br>。</p><p>比赛当天，主办方把所有队伍分成AB两组，在两个机房同时进行比赛，我们在B组。提供了两个linux系统，一个作为攻击机，一个作为靶机（两台机器的linux版本都比较老），而且最要命的是我们带的电脑根本无法连上攻击机和靶机，只能通过虚拟桌面控制攻击机和靶机，而且每台机器同一时间只能有一名队员使用（还有这种操作？？？喵喵喵？第三名队员做什么？？？），顿时心态炸了，我们准备的所有东西都用不上。</p><p>第一轮比赛原计划是8点就开始的，但是我们B组后面的几个队伍都打不开虚拟机，别人都已经开始操作了，我们还一脸懵逼的状态，去问技术客服到底什么情况，他们说正在处理，哇，还有这种操作的吗？？？（不得不吐槽一下了，蓝盾这个公司到底怎么回事，弄个比赛总是出问题，从初赛第一轮开始，第一轮打到一半，平台挂了？？？删库跑路？？？然后道歉比赛推迟一周，初赛很水就算了，可这是决赛啊）然后这种情况持续了很久，中途我们也一直在问技术，技术也没办法，说先把我们ip关了，不让其他队伍打我们靶机（到底关没关也不知道），这种情况一共持续了40分钟，最后20分钟终于好了，我们连上靶机，先把文件全都下攻击机上，然后再改密码，可是我找了半天发现靶机和攻击机上没有一个文本编辑器，这又是什么操作？D盾不能扫漏洞，我自己审计代码都不让？然后用cat命令看了一下开了哪些端口服务，什么都没有做，第一轮就结束了。</p><p>第二轮换题了（后来给执念于心大佬说这事，大佬表示很惊讶），是个博客框架，我们按照第一轮的套路，先备份文件，改密码，这一轮终于有了文本编辑器，想到这种环境，主办方应该会预留一些一句话后门，审了半天找到一个，直接注释掉，然后发现了一个后门的php文件我脑子一热，直接删掉了（结束以后才想到我们一直没有宕机，所以check是假的？），当我们做完这一切的时候剩的时间也不多了，在攻击机上我发现有c刀，但是很奇怪后缀是.exe，也打不开。以前都是在windows上用的c刀，搞了半天也没连上，估计别人早都把洞补上了吧，毕竟我们这么菜。</p><p>第三轮是个cms，上来找到两个sql注入的洞，第一个没有正确过滤get_ip参数，第二个过滤关键字的时候直接把关键字替换成空格，第一个洞我们把参数改了，然后函数无法执行，第二个我们没想到好的方法，就选择把关键字过滤了两次，然后我们开始burp抓包写payload，尝试攻击其他队，但这个时候所有队伍突然都连不上虚拟机（又开始了？），一直持续了10多分钟，然后叫我换ip访问，重新连上之后，赶紧把包发出去，发现那个队的页面无法访问，主页面报错，我们又发现我们的flag被改了，大佬们好强，flag文件只能读不能改，大佬们居然改成功了，然后我们又开始找洞，过了一会儿所有队又连不上，很迷，持续了几分钟，结束前5五分钟，找到了一个大马，赶紧删掉。</p><h2 id="比赛感悟"><a href="#比赛感悟" class="headerlink" title="比赛感悟"></a>比赛感悟</h2><p>第一次，感悟很多，我们做的很差，一直在被动挨打，主要原因还是在自身，对于linux系统的不熟练吃了很多亏，这次比赛没有pwn，全是web，自己很菜，不会写脚本，对于漏洞的如何利用反应很慢，代码审计没有技巧，对于工具的运用不熟练。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>考试周过完了，发现以前自己学得很乱，立个flag吧，每周一篇博客，明确自己在干什么。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;比赛经过&quot;&gt;&lt;a href=&quot;#比赛经过&quot; class=&quot;headerlink&quot; title=&quot;比赛经过&quot;&gt;&lt;/a&gt;比赛经过&lt;/h2&gt;&lt;p&gt;比赛已经结束一周，突然觉得好像有必要写点总结（被大佬们打得头皮发麻。。。）。软件工程考试前三天，接到通知说要去线下比赛，刚开
      
    
    </summary>
    
      <category term="awd" scheme="http://yoursite.com/categories/awd/"/>
    
    
      <category term="awd" scheme="http://yoursite.com/tags/awd/"/>
    
  </entry>
  
  <entry>
    <title>php_screw解密</title>
    <link href="http://yoursite.com/2017/11/05/php-screw%E8%A7%A3%E5%AF%86/"/>
    <id>http://yoursite.com/2017/11/05/php-screw解密/</id>
    <published>2017-11-05T08:38:46.000Z</published>
    <updated>2017-11-05T09:00:02.654Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h1><p>最近练习ctf遇到一道php_screw加密的题目，百度一圈在线解的话需要收费（每次遇到收费解密的题，很烦有木有）。最后在github上找到一个解密的脚本，这里结合这道题说一下使用方法。</p><p><a href="https://github.com/amor-tsai/php_screw" target="_blank" rel="external">项目链接</a></p><h1 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h1><p>项目要求要求php环境，版本5.x，并要求zlib支持，我的php是5.6。打开文件夹，在tools目录下运行make指令会生成两个可执行文件。screw用来加密，screwd用来解密。在文件夹中有两个文件，一个是my_screw.h，另一个是php_screw.h。</p><h2 id="php-screw-h"><a href="#php-screw-h" class="headerlink" title="php_screw.h"></a>php_screw.h</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#define PM9SCREW             &quot;\tPM9SCREW\t&quot;</div><div class="line">#define PM9SCREW_LEN         10</div></pre></td></tr></table></figure><p>如果不改这个文件，你加密的文件内容开头就会有 PM9SCREW ，你复制到google搜索下就知道是用screw模块加密的，所以可以对其进行修改隐藏加密算法。</p><h2 id="my-screw-h"><a href="#my-screw-h" class="headerlink" title="my_screw.h"></a>my_screw.h</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">short pm9screw_mycryptkey[] = &#123;</div><div class="line"> 11152, 368, 192, 1281, 62</div><div class="line">&#125;;</div></pre></td></tr></table></figure><p>加密密钥，修改文件里面的数组文件，可以用数字添 加该数组的长度。数组越长，加密越可靠。而且该数组的长度不会影响加密以及你的PHP程序执行的速度，但是最好不要超过五位。</p><h1 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h1><p>index.php.bak源码下载，并且在index.php的源码里面发现了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;!--The #define is xxooaa and LEN is 6--&gt;</div><div class="line">&lt;!--The crypt key is &#123;11132, 468, 392, 1281, 62&#125;--&gt;</div></pre></td></tr></table></figure></p><p>按照上面写的，修改my_screw.h和php_screw.h两个文件。</p><p>然后在tools目录下再进行解密<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./screwd index.php</div></pre></td></tr></table></figure></p><p>解密后的文件名在原先文件后加.src后缀</p><p>同样你也可以进行你想要的加密</p><h1 id="0x03"><a href="#0x03" class="headerlink" title="0x03"></a>0x03</h1><p>最后说一下phpjiami，这里只能Orz大佬</p><p><a href="https://www.leavesongs.com/PENETRATION/unobfuscated-phpjiami.html" target="_blank" rel="external">链接</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;0x00&quot;&gt;&lt;a href=&quot;#0x00&quot; class=&quot;headerlink&quot; title=&quot;0x00&quot;&gt;&lt;/a&gt;0x00&lt;/h1&gt;&lt;p&gt;最近练习ctf遇到一道php_screw加密的题目，百度一圈在线解的话需要收费（每次遇到收费解密的题，很烦有木有）。最后在g
      
    
    </summary>
    
      <category term="web" scheme="http://yoursite.com/categories/web/"/>
    
    
      <category term="php_screw" scheme="http://yoursite.com/tags/php-screw/"/>
    
      <category term="phpjiami" scheme="http://yoursite.com/tags/phpjiami/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2017/10/19/hello-world/"/>
    <id>http://yoursite.com/2017/10/19/hello-world/</id>
    <published>2017-10-19T02:45:15.573Z</published>
    <updated>2017-10-19T11:39:21.280Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
